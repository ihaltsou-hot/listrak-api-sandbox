package sms

import (
    "fmt"
    "listrak-api-sandbox/view"
    "listrak-api-sandbox/view/layout"
    "listrak-api-sandbox/types"
)

templ Index(contacts []types.ContactDto) {
    @layout.App(true) {
		<div class="max-w-2xl w-full mx-auto mt-8">
			<div>
				<h1 class="text-lg font-semibold border-b border-gray-700 pb-2">Contacts</h1>
			</div>
			<div class="contacts" hx-target="closest .contact" hx-swap="outerHTML swap:1s">
			if len(contacts) == 0 {
			    <div role="alert" class="alert mt-8">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    class="stroke-info h-6 w-6 shrink-0">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span>No Contacts yet created.</span>
                </div>
			}
            for _, contact := range contacts {
                @Contact(contact)
            }
			</div>

		</div>
    }
}

func getContactID(contact types.ContactDto) string {
    return fmt.Sprintf("contact_%d", contact.ID)
}

func getContactDeleteUrl(id int) string {
	return fmt.Sprintf(
		"/sms/contact/%d/",
		id,
	)
}

templ Contact(contact types.ContactDto) {
    <div id={ getContactID(contact) } class="contact card mt-8 w-100 shadow-xl bg-base-200">
      <div class="card-body">
        <div class="card-actions justify-end">
          <button class="btn btn-square btn-sm"
            hx-delete={ getContactDeleteUrl(contact.ID) }
            hx-swap="outerHTML"
            hx-target={ "#" + getContactID(contact) }
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <h2 class="card-title">{ view.StringToPhone(contact.PhoneNumber) }</h2>
        if len(contact.Subscriptions) == 0 {
            @EmptySubscriptions()
        } else {
            @Subscriptions(contact.Subscriptions)
        }
      </div>
    </div>
}

templ ContactError(err error) {
    <div class="contact card mt-8 w-100 shadow-xl bg-base-200">
      <div class="card-body">
        @ErrorAlert(err)
      </div>
    </div>
}

templ ErrorAlert(err error) {
    <div role="alert" class="alert alert-error">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6 shrink-0 stroke-current"
        fill="none"
        viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span>{ err.Error() }</span>
    </div>
}

templ EmptySubscriptions() {
    <p class="mt-8">No Subscriptions created for the Contact.</p>
}

templ Subscriptions(subscriptions []types.Subscription) {
    <div class="overflow-x-auto">
      <table class="table">
        <thead>
          <tr>
            <th>Phone List</th>
            <th>Subscribed</th>
            <th>Pending</th>
          </tr>
        </thead>
        <tbody>
          for _, subscription := range subscriptions {
              @Subscription(subscription)
          }
        </tbody>
      </table>
    </div>
}

func getSubscriptionID(subscription types.Subscription) string {
    return fmt.Sprintf("subscription_%d", subscription.ID)
}

func getSubscriptionUpdateUrl(id int, field string, currentState bool) string {
	var desiredValue int
	if currentState {
		desiredValue = 0
	} else {
		desiredValue = 1
	}

	return fmt.Sprintf(
		"/sms/subscription/%d/%s/%d/",
		id,
		field,
		desiredValue,
	)
}

templ Subscription(subscription types.Subscription) {
    <tr id={  getSubscriptionID(subscription) } >
        <th>
            { view.String(subscription.PhoneList) }
        </th>
        <td>
            <input
                hx-put={ getSubscriptionUpdateUrl(subscription.ID, "subscribed", subscription.Subscribed) }
                hx-swap="outerHTML"
                hx-target={  "#" + getSubscriptionID(subscription) }
                type="checkbox"
                class="toggle toggle-primary"
                if subscription.Subscribed {
                    checked
                }
            />
        </td>
        <td>
            <input
                hx-put={ getSubscriptionUpdateUrl(subscription.ID, "pending", subscription.PendingDoubleOptIn) }
                hx-swap="outerHTML"
                hx-target={  "#" + getSubscriptionID(subscription) }
                type="checkbox"
                class="toggle toggle-primary"
                if subscription.PendingDoubleOptIn {
                    checked
                }
            />
        </td>
    </tr>
}

templ SubscriptionError(err error) {
     <tr>
        <td colspan="3">
            @ErrorAlert(err)
        </td>
     </tr>
}